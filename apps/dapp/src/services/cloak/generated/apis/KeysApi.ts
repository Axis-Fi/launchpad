/* tslint:disable */
/* eslint-disable */
/**
 * Cloak Key Management API
 * Cloak provides a simple key management API for RSA key pairs. It allows users to create a key pair where the private key will only be revealed after a certain time. The time is determined by the conclusion of an auction that the key is mapped to based on observations of blockchain events.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Decrypt } from "../models/index";
import { DecryptFromJSON, DecryptToJSON } from "../models/index";

export interface DecryptsLotIdGetRequest {
  xChainId: number;
  xAuctionHouse: string;
  lotId: number;
}

export interface PrivateKeyLotIdGetRequest {
  xChainId: number;
  xAuctionHouse: string;
  lotId: number;
}

export interface PublicKeyLotIdGetRequest {
  xChainId: number;
  xAuctionHouse: string;
  lotId: number;
}

/**
 *
 */
export class KeysApi extends runtime.BaseAPI {
  /**
   * Retrieve a list of the next decrypts needed for a given lot ID. Decrypts will only be revealed after the auction for the lot has concluded. If an auction is cancelled, decrypts will not be revealed.
   */
  async decryptsLotIdGetRaw(
    requestParameters: DecryptsLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Decrypt>>> {
    if (
      requestParameters.xChainId === null ||
      requestParameters.xChainId === undefined
    ) {
      throw new runtime.RequiredError(
        "xChainId",
        "Required parameter requestParameters.xChainId was null or undefined when calling decryptsLotIdGet.",
      );
    }

    if (
      requestParameters.xAuctionHouse === null ||
      requestParameters.xAuctionHouse === undefined
    ) {
      throw new runtime.RequiredError(
        "xAuctionHouse",
        "Required parameter requestParameters.xAuctionHouse was null or undefined when calling decryptsLotIdGet.",
      );
    }

    if (
      requestParameters.lotId === null ||
      requestParameters.lotId === undefined
    ) {
      throw new runtime.RequiredError(
        "lotId",
        "Required parameter requestParameters.lotId was null or undefined when calling decryptsLotIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xChainId !== undefined &&
      requestParameters.xChainId !== null
    ) {
      headerParameters["x-chain-id"] = String(requestParameters.xChainId);
    }

    if (
      requestParameters.xAuctionHouse !== undefined &&
      requestParameters.xAuctionHouse !== null
    ) {
      headerParameters["x-auction-house"] = String(
        requestParameters.xAuctionHouse,
      );
    }

    const response = await this.request(
      {
        path: `/decrypts/{lot_id}`.replace(
          `{${"lot_id"}}`,
          encodeURIComponent(String(requestParameters.lotId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DecryptFromJSON),
    );
  }

  /**
   * Retrieve a list of the next decrypts needed for a given lot ID. Decrypts will only be revealed after the auction for the lot has concluded. If an auction is cancelled, decrypts will not be revealed.
   */
  async decryptsLotIdGet(
    requestParameters: DecryptsLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Decrypt>> {
    const response = await this.decryptsLotIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a new 1024-bit RSA key pair with public expononent 65537. Returns the public key modulus.
   */
  async newKeyPairPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/new_key_pair`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a new 1024-bit RSA key pair with public expononent 65537. Returns the public key modulus.
   */
  async newKeyPairPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.newKeyPairPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieve the private key for a given lot ID. The private key will only be revealed after the auction for the lot has concluded. If an auction is cancelled, the private key will not be revealed.
   */
  async privateKeyLotIdGetRaw(
    requestParameters: PrivateKeyLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.xChainId === null ||
      requestParameters.xChainId === undefined
    ) {
      throw new runtime.RequiredError(
        "xChainId",
        "Required parameter requestParameters.xChainId was null or undefined when calling privateKeyLotIdGet.",
      );
    }

    if (
      requestParameters.xAuctionHouse === null ||
      requestParameters.xAuctionHouse === undefined
    ) {
      throw new runtime.RequiredError(
        "xAuctionHouse",
        "Required parameter requestParameters.xAuctionHouse was null or undefined when calling privateKeyLotIdGet.",
      );
    }

    if (
      requestParameters.lotId === null ||
      requestParameters.lotId === undefined
    ) {
      throw new runtime.RequiredError(
        "lotId",
        "Required parameter requestParameters.lotId was null or undefined when calling privateKeyLotIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xChainId !== undefined &&
      requestParameters.xChainId !== null
    ) {
      headerParameters["x-chain-id"] = String(requestParameters.xChainId);
    }

    if (
      requestParameters.xAuctionHouse !== undefined &&
      requestParameters.xAuctionHouse !== null
    ) {
      headerParameters["x-auction-house"] = String(
        requestParameters.xAuctionHouse,
      );
    }

    const response = await this.request(
      {
        path: `/private_key/{lot_id}`.replace(
          `{${"lot_id"}}`,
          encodeURIComponent(String(requestParameters.lotId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Retrieve the private key for a given lot ID. The private key will only be revealed after the auction for the lot has concluded. If an auction is cancelled, the private key will not be revealed.
   */
  async privateKeyLotIdGet(
    requestParameters: PrivateKeyLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.privateKeyLotIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieve the public key modulus for a given lot ID.
   */
  async publicKeyLotIdGetRaw(
    requestParameters: PublicKeyLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.xChainId === null ||
      requestParameters.xChainId === undefined
    ) {
      throw new runtime.RequiredError(
        "xChainId",
        "Required parameter requestParameters.xChainId was null or undefined when calling publicKeyLotIdGet.",
      );
    }

    if (
      requestParameters.xAuctionHouse === null ||
      requestParameters.xAuctionHouse === undefined
    ) {
      throw new runtime.RequiredError(
        "xAuctionHouse",
        "Required parameter requestParameters.xAuctionHouse was null or undefined when calling publicKeyLotIdGet.",
      );
    }

    if (
      requestParameters.lotId === null ||
      requestParameters.lotId === undefined
    ) {
      throw new runtime.RequiredError(
        "lotId",
        "Required parameter requestParameters.lotId was null or undefined when calling publicKeyLotIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xChainId !== undefined &&
      requestParameters.xChainId !== null
    ) {
      headerParameters["x-chain-id"] = String(requestParameters.xChainId);
    }

    if (
      requestParameters.xAuctionHouse !== undefined &&
      requestParameters.xAuctionHouse !== null
    ) {
      headerParameters["x-auction-house"] = String(
        requestParameters.xAuctionHouse,
      );
    }

    const response = await this.request(
      {
        path: `/public_key/{lot_id}`.replace(
          `{${"lot_id"}}`,
          encodeURIComponent(String(requestParameters.lotId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Retrieve the public key modulus for a given lot ID.
   */
  async publicKeyLotIdGet(
    requestParameters: PublicKeyLotIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.publicKeyLotIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
